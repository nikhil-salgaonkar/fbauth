package fbauth

import "io"
import "log"
import "errors"
import "strconv"
import "net/url"
import "net/http"
import "io/ioutil"
import "encoding/json"

var (
	redirect_uri string
	client_secret string
	client_id string
)

var (
	AccessDenied error = errors.New("fbauth: access denied by user.")
	ExchangeFail error = errors.New("fbauth: code-token exchange failed.")
	DebugErr error = errors.New("fbauth: An error occured while debugging access_token.")
	GraphErr error = errors.New("fbauth: error occured during GET /me")
)

//shorthand for map[string] interface{}
type JSON map[string]interface{}

// helper to get response body
func getResponseBody(r io.Reader) ([]byte, error) {

	body, err := ioutil.ReadAll(r)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return body, nil
}

// Exchanges Code for Access Token
func getAccessToken(code string) (string, error) {
	
	res, err := http.Get("https://graph.facebook.com/oauth/access_token?" +
			"client_id=" + client_id +
			"&redirect_uri=" + redirect_uri +
			"&client_secret=" + client_secret +
			"&code=" + code)

	if err != nil {
		log.Println(err)
		return "", ExchangeFail
	}

	body, err := getResponseBody(res.Body)
	if err != nil {
		return "", ExchangeFail
	}

	m, err := url.ParseQuery(string(body))
	if err != nil {
		log.Println(err)
		return "", ExchangeFail
	}

	return m.Get("access_token"), nil
}

// debugs Access Token. Returns true if generated by crushify & valid for user_id
func debugAccessToken(access_token, user_id string) error {

	res, err := http.Get("https://graph.facebook.com/debug_token?"+
			"input_token=" + access_token + 
			"&access_token=" + client_id + "|" + client_secret)

	if err != nil {
		log.Println(err)
		return DebugErr
	}

	body, err := getResponseBody(res.Body)
	if err != nil {
		return DebugErr
	}

	var data JSON
	err = json.Unmarshal(body, &data)
	if err != nil {
		log.Println(err)
		return DebugErr
	}

	if client_id == strconv.FormatInt(int64(data["data"].(JSON)["app_id"].(float64)), 64) {
		if user_id == strconv.FormatInt(int64(data["data"].(JSON)["user_id"].(float64)), 64) {
			return nil
		}
	}

	return DebugErr
}

// fetched user id, name, email via facebook graph api
func getUserDetails(access_token string) (int64, string, string, string, error) {

	res, err := http.Get("https://graph.facebook.com/me?fields=id,name,email,gender&access_token="+access_token)
	if err != nil {
		log.Println(err)
		return 0, "", "", "", GraphErr
	}

	body, err := getResponseBody(res.Body)
	if err != nil {
		return 0, "", "", "", GraphErr
	}

	var data map[string] string
	err = json.Unmarshal(body, &data)
	if err != nil {
		log.Println(err)
		return 0, "", "", "", GraphErr	
	}

	id, err := strconv.ParseInt(data["id"], 10, 64)
	if err != nil {
		log.Println(err)
		return 0, "", "", "", GraphErr	
	}

	return id, data["name"], data["email"], data["gender"], nil
}

// handles fb authentication redirect
func Handler(w http.ResponseWriter, r *http.Request) (string, int64, string, string, string, error) {

	if r.FormValue("error") == "access_denied" {
		log.Println(r.FormValue("error_reason"), " : ", r.FormValue("error_description"))
		return "", 0, "", "", "", AccessDenied
	}

	access_token, err := getAccessToken(r.FormValue("code"))
	if err != nil {
		return "", 0, "", "", "", AccessDenied
	}

	a, b, c, d, err := getUserDetails(access_token)
	return access_token, a, b, c, d, err
}

// initializes client id, secret and redirect uri
func Start(id, secret, uri string) {
	client_id, client_secret, redirect_uri = id, secret, uri
}